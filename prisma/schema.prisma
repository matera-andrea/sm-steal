// Schema Prisma ottimizzato per e-commerce
// Versione ottimizzata con correzioni di errori e miglioramenti delle performance

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum per categoria prodotto
enum CategoryItem {
  SNEAKER
  SHOE
  COLLECTIBLE
  CLOTHING
  ACCESSORY
  OTHER
}

// Enum per tipo di sizing
enum SizingType {
  UK
  US
  IT
  OFA
  OTHER
}

enum Gender {
  MEN
  WOMEN
  UNISEX
  KIDS
}

enum ListingCondition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  ACCEPTABLE
  POOR
}

// Modello per i brand
model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logoUrl     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  itemsCount  Int      @default(0)

  // Relazioni
  items Item[]

  // Indici per performance
  @@index([name])
  @@index([isActive])
  @@map("brands")
}

// Modello principale per i prodotti
model Item {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  category    CategoryItem
  sku         String?      @unique
  gender      Gender       @default(MEN)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  listingCount Int         @default(0)
  wishlistItemsCount Int   @default(0)
  
  // Foreign keys
  brandId String
  
  // Relazioni
  brand     Brand          @relation(fields: [brandId], references: [id])
  listings  Listing[]
  wishlistItems WishlistItem[]
  
  // Indici per performance 
  @@index([category])
  @@index([gender])
  @@index([brandId])
  @@index([isActive])
  @@index([name])
  @@index([category, gender]) // Indice composito per filtri comuni
  @@map("items")
}

// Modello per le foto prodotto
model Photo {
  id        String   @id @default(cuid())
  name      String
  url       String
  altText   String?
  isMain    Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  
  // Foreign keys
  listingId String
  
  // Relazioni
  listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  // Indici per performance
  @@index([listingId])
  @@index([isMain])
  @@map("photos")
}

// Modello per le taglie
model Sizing {
  id        String     @id @default(cuid())
  size      String
  type      SizingType
  createdAt DateTime   @default(now())
  
  // Relazioni
  listings ListingSizing[]
  
  // Constraint di unicità
  @@unique([size, type])
  @@index([type])
  @@map("sizings")
}

// Modello per i prezzi
model Price {
  id         String    @id @default(cuid())
  basePrice  Decimal   @db.Decimal(10, 2)
  salePrice  Decimal?  @db.Decimal(10, 2)
  validFrom  DateTime  @default(now())
  validUntil DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  // Foreign keys
  listingId String @unique
  
  // Relazioni
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  // Indici per performance
  @@index([validFrom])
  @@index([validUntil])
  @@map("prices")
}

// Modello per i listing/annunci
model Listing {
  id          String           @id @default(cuid())
  description String?
  condition   ListingCondition @default(NEW)
  stock       Int             @default(1)
  isActive    Boolean         @default(true)
  isFeatured  Boolean         @default(false)
  
  startDate   DateTime        @default(now())
  endDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Foreign keys
  itemId String
  
  // Relazioni
  item          Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  price         Price?
  photos        Photo[]
  sizings       ListingSizing[]
  wishlistItems WishlistItem[]
  
  // Indici per performance
  @@index([itemId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([startDate])
  @@index([endDate])
  @@index([condition])
  @@index([isActive, isFeatured]) // Indice composito per listing attivi e in evidenza
  @@index([itemId, isActive]) // Indice composito per query per prodotto
  @@map("listings")
}

// Tabella di collegamento per listing e taglie (many-to-many)
model ListingSizing {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Foreign keys
  listingId String
  sizingId  String
  
  // Relazioni
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  sizing  Sizing  @relation(fields: [sizingId], references: [id], onDelete: Cascade)
  
  // Constraint di unicità
  @@unique([listingId, sizingId])
  @@index([listingId])
  @@index([sizingId])
  @@map("listing_sizings")
}

// Modello per gli utenti
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)
  role         String   @default("USER")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relazioni
  wishlistItems WishlistItem[]
  
  // Indici per performance
  @@index([email])
  @@index([isActive])
  @@index([role])
  @@map("users")
}

// Modello per la wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Foreign keys
  userId    String
  itemId    String?
  listingId String?
  
  // Relazioni
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item    Item?    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  // Constraint: almeno un elemento deve essere specificato
  // Constraint di unicità per evitare duplicati
  @@unique([userId, itemId], name: "unique_user_item")
  @@unique([userId, listingId], name: "unique_user_listing")
  @@index([userId])
  @@index([itemId])
  @@index([listingId])
  @@map("wishlist_items")
}