generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum CategoryItem {
  SNEAKER
  SHOE
  COLLECTIBLE
  CLOTHING
  ACCESSORY
  OTHER
}

enum SizingType {
  UK
  US
  IT
  OFA
  OTHER
}

enum Gender {
  MEN
  WOMEN
  UNISEX
  KIDS
}

enum ListingCondition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  ACCEPTABLE
  POOR
}

// AGGIUNTA SUGGERITA: Usare un enum per i ruoli previene errori di battitura
// e centralizza i ruoli disponibili.
enum Role {
  USER
  ADMIN
  MODERATOR
}


// --- Modelli ---

model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logoUrl     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  itemsCount  Int      @default(0)

  sneakerModels SneakerModel[]

  @@index([name])
  @@index([isActive])
  @@map("brands")
}

model SneakerModel{
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  itemsCount  Int      @default(0)
  
  brandId     String
  
  items Item[]
  Brand Brand @relation(fields: [brandId], references: [id])
  
  @@index([name])
  @@index([isActive])
  @@map("sneaker_models")
}

model Item {
  id                 String       @id @default(cuid())
  name               String       @unique
  description        String?
  category           CategoryItem
  sku                String?      @unique
  gender             Gender       @default(MEN)
  isActive           Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  // Questi contatori sono gestiti dal database tramite transazioni, non dall'input dell'utente
  listingCount       Int          @default(0) 
  wishlistItemsCount Int          @default(0)
  
  sneakerModelId String

  sneakerModel SneakerModel @relation(fields: [sneakerModelId], references: [id], onDelete: Cascade)
  listings     Listing[]
  wishlistItems WishlistItem[]
  
  @@index([category])
  @@index([gender])
  @@index([isActive])
  @@index([name])
  @@index([category, gender])
  @@map("items")
}

model Photo {
  id        String   @id @default(cuid())
  name      String
  url       String
  altText   String?
  isMain    Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  
  listingId String
  
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@index([listingId])
  @@index([isMain])
  @@map("photos")
}

model Sizing {
  id        String     @id @default(cuid())
  size      String
  type      SizingType
  createdAt DateTime   @default(now())
  
  listings ListingSizing[]
  
  @@unique([size, type])
  @@index([type])
  @@map("sizings")
}

model Listing {
  id          String           @id @default(cuid())
  description String?
  condition   ListingCondition @default(NEW)
  stock       Int              @default(1)
  isActive    Boolean          @default(true)
  isFeatured  Boolean          @default(false)
  price       Float            @default(0.0)
  
  startDate   DateTime        @default(now())
  endDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  itemId String
  
  item          Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  photos        Photo[]
  sizings       ListingSizing[]
  wishlistItems WishlistItem[]
  
  @@index([itemId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([itemId, isActive])
  @@map("listings")
}

model ListingSizing {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  listingId String
  sizingId  String
  
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  sizing  Sizing  @relation(fields: [sizingId], references: [id], onDelete: Cascade)
  
  @@unique([listingId, sizingId])
  @@index([listingId])
  @@index([sizingId])
  @@map("listing_sizings")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)
  role         Role     @default(USER) 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  wishlistItems WishlistItem[]
  
  @@index([email])
  @@index([isActive])
  @@index([role])
  @@map("users")
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  itemId    String?
  listingId String?
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item    Item?    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@unique([userId, itemId], name: "unique_user_item")
  @@unique([userId, listingId], name: "unique_user_listing")
  @@index([userId])
  @@index([itemId])
  @@index([listingId])
  @@map("wishlist_items")
}